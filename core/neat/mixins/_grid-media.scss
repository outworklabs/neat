@charset "UTF-8";
/// Creates a media query in which custom grid properties can be defined.
/// Add the `media` property to your custom grid settings map and add the media
/// you would like to scope to. If only a number is defined, it is assumed this
/// is a `min-with` value. Your custom grid can then be passed to the mixin.
///
/// @group features
///
/// @name Grid media
///
/// @argument {map} $grid
///   The grid to be used within the scope of the block.
///   This grid should include the `media` property to determine the expression
///   for the media query.
///   By default, the global `$neat-grid` will be used.
///
/// @example scss
///   $custom-neat-grid: (
///     columns: 12,
///     gutter: 50px,
///     media: 1000px,
///   );
///
///   .element {
///     @include grid-column(3);
///
///     @include grid-media($custom-neat-grid){
///       @include grid-column(6);
///     }
///   }
///
/// @example css
///   .element {
///     width: calc(25% - 25px);
///     float: left;
///     margin-left: 20px;
///   }
///
///   @media only screen and (min-width: 1000px) {
///     .element {
///       width: calc(50% - 75px);
///       float: left;
///       margin-left: 50px;
///     }
///   }

@mixin grid-media($grid) {
  $_media: _retrieve-neat-setting($grid, media);
  $_query: _neat-parse-media($_media);

  @media #{$_query} {
    $_default-neat-grid: $neat-grid;
    $neat-grid: map-merge($neat-grid, $grid) !global;
    @content;
    $neat-grid: $_default-neat-grid !global;
  }
}
